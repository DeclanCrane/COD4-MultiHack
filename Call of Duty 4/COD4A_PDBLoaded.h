/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'COD4A_PDBLoaded'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long
#define _BOOL1 bool
#define _BYTE char

struct D3DBaseTexture;
struct D3DCubeTexture;
struct D3DVertexDeclaration;
struct D3DPixelShader;
struct D3DVertexShader;
struct D3DVolumeTexture;
struct D3DTexture;
struct XAUDIOCHANNELMAPENTRY;
struct SndCurve;
struct XaSound;
struct SoundFile;
struct SpeakerMap;
struct snd_alias_t;
struct snd_alias_list_t;
struct cbrushside_t;
struct XModelHighMipBounds;
struct BrushWrapper;
struct FxElemVelStateSample;
struct FxElemVisStateSample;
struct MaterialTechniqueSet;
struct MaterialVertexDeclaration;
struct MaterialVertexShader;
struct MaterialPixelShader;
struct MaterialShaderArgument;
struct MaterialTechnique;
struct GfxImageLoadDef;
struct GfxImage;
struct water_t;
struct MaterialWaterDef;
struct MaterialTextureDef;
struct MaterialConstantDef;
struct GfxStateBits;
struct Material;
struct FxElemMarkVisuals;
struct DObjAnimMat;
struct GfxPackedVertex;
struct XSurfaceCollisionNode;
struct XSurfaceCollisionLeaf;
struct XSurfaceCollisionTree;
struct XRigidVertList;
struct XSurface;
struct XModelCollSurf_s;
struct XBoneInfo;
struct PhysPreset;
struct PhysGeomInfo;
struct PhysGeomList;
struct XModel;
struct FxEffectDef;
union FxElemVisuals;
struct FxTrailVertex;
struct FxTrailDef;
struct FxElemDef;
struct XAnimNotifyInfo;
struct XAnimPartTrans;
struct XAnimDeltaPartQuat;
struct XAnimDeltaPart;
struct XAnimParts;
struct GfxLightDef;
struct XAnim_s;
struct XAnimTree_s;
struct DObj_s;
struct clientControllers_t;
struct FxEffect;
struct animScriptItem_t;
struct DObjModel_s;
struct gitem_s;
struct gclient_s;
struct turretInfo_s;
struct scr_vehicle_s;
struct tagInfo_s;
union $73EC31463AB2E2014DA76FFB3C0281FF;

/* 6784 */
struct cplane_s
{
  float normal[3];
  float dist;
  char type;
  char signbits;
  char pad[2];
};

/* 6864 */
struct gameState_t
{
  int stringOffsets[2304];
  char stringData[131072];
  int dataCount;
};

/* 7080 */
#pragma pack(push, 4)
struct CEntPlayerInfo
{
  clientControllers_t *control;
  char tag[6];
};
#pragma pack(pop)

/* 7081 */
struct CEntTurretAngles
{
  float pitch;
  float yaw;
};

/* 7082 */
union $FAB97167803560EC0457328032896A3E
{
  CEntTurretAngles angles;
  const float *viewAngles;
};

/* 7083 */
struct CEntTurretInfo
{
  $FAB97167803560EC0457328032896A3E ___u0;
  float barrelPitch;
  _BOOL1 playerUsing;
  char tag_aim;
  char tag_aim_animated;
  char tag_flash;
};

/* 7084 */
#pragma pack(push, 4)
struct CEntVehicleInfo
{
  __int16 pitch;
  __int16 yaw;
  __int16 roll;
  __int16 barrelPitch;
  float barrelRoll;
  __int16 steerYaw;
  float time;
  unsigned __int16 wheelFraction[4];
  char wheelBoneIndex[4];
  char tag_body;
  char tag_turret;
  char tag_barrel;
};
#pragma pack(pop)

/* 7088 */
struct CEntFx
{
  int triggerTime;
  FxEffect *effect;
};

/* 7089 */
union $1FDB7094A69B8E896A15A99EA584326D
{
  CEntPlayerInfo player;
  CEntTurretInfo turret;
  CEntVehicleInfo vehicle;
  CEntFx fx;
};

/* 7090 */
#pragma pack(push, 4)
struct cpose_t
{
  unsigned __int16 lightingHandle;
  char eType;
  char eTypeUnion;
  char localClientNum;
  int cullIn;
  char isRagdoll;
  int ragdollHandle;
  int killcamRagdollHandle;
  int physObjId;
  float origin[3];
  float angles[3];
  $1FDB7094A69B8E896A15A99EA584326D ___u11;
};
#pragma pack(pop)

/* 7079 */
struct clientControllers_t
{
  float angles[6][3];
  float tag_origin_angles[3];
  float tag_origin_offset[3];
};

/* 7085 */
struct FxBoltAndSortOrder
{
  int _bf0;
};

/* 7086 */
struct FxSpatialFrame
{
  float quat[4];
  float origin[3];
};

/* 7087 */
struct FxEffect
{
  FxEffectDef *def;
  volatile int status;
  unsigned __int16 firstElemHandle[3];
  unsigned __int16 firstSortedElemHandle;
  unsigned __int16 firstTrailHandle;
  unsigned __int16 randomSeed;
  unsigned __int16 owner;
  unsigned __int16 packedLighting;
  FxBoltAndSortOrder boltAndSortOrder;
  volatile int frameCount;
  int msecBegin;
  int msecLastUpdate;
  FxSpatialFrame frameAtSpawn;
  FxSpatialFrame frameNow;
  FxSpatialFrame framePrev;
  float distanceTraveled;
};

/* 6935 */
struct FxEffectDef
{
  const char *name;
  int flags;
  int totalSize;
  int msecLoopingLife;
  int elemDefCountLooping;
  int elemDefCountOneShot;
  int elemDefCountEmission;
  FxElemDef *elemDefs;
};

/* 6874 */
struct FxSpawnDefLooping
{
  int intervalMsec;
  int count;
};

/* 6875 */
struct FxIntRange
{
  int base;
  int amplitude;
};

/* 6876 */
struct FxSpawnDefOneShot
{
  FxIntRange count;
};

/* 6877 */
union FxSpawnDef
{
  FxSpawnDefLooping looping;
  FxSpawnDefOneShot oneShot;
};

/* 6878 */
struct FxFloatRange
{
  float base;
  float amplitude;
};

/* 6879 */
struct FxElemAtlas
{
  char behavior;
  char index;
  char fps;
  char loopCount;
  char colIndexBits;
  char rowIndexBits;
  __int16 entryCount;
};

/* 6936 */
union FxEffectDefRef
{
  FxEffectDef *handle;
  const char *name;
};

/* 6937 */
union FxElemVisuals
{
  const void *anonymous;
  Material *material;
  XModel *model;
  FxEffectDefRef effectDef;
  const char *soundName;
};

/* 6938 */
union FxElemDefVisuals
{
  FxElemMarkVisuals *markArray;
  FxElemVisuals *array;
  FxElemVisuals instance;
};

/* 6941 */
const struct FxElemDef
{
  int flags;
  FxSpawnDef spawn;
  FxFloatRange spawnRange;
  FxFloatRange fadeInRange;
  FxFloatRange fadeOutRange;
  float spawnFrustumCullRadius;
  FxIntRange spawnDelayMsec;
  FxIntRange lifeSpanMsec;
  FxFloatRange spawnOrigin[3];
  FxFloatRange spawnOffsetRadius;
  FxFloatRange spawnOffsetHeight;
  FxFloatRange spawnAngles[3];
  FxFloatRange angularVelocity[3];
  FxFloatRange initialRotation;
  FxFloatRange gravity;
  FxFloatRange reflectionFactor;
  FxElemAtlas atlas;
  char elemType;
  char visualCount;
  char velIntervalCount;
  char visStateIntervalCount;
  FxElemVelStateSample *velSamples;
  FxElemVisStateSample *visSamples;
  FxElemDefVisuals visuals;
  float collMins[3];
  float collMaxs[3];
  FxEffectDefRef effectOnImpact;
  FxEffectDefRef effectOnDeath;
  FxEffectDefRef effectEmitted;
  FxFloatRange emitDist;
  FxFloatRange emitDistVariance;
  FxTrailDef *trailDef;
  char sortOrder;
  char lightingFrac;
  char unused[2];
};

/* 6880 */
struct FxElemVec3Range
{
  float base[3];
  float amplitude[3];
};

/* 6881 */
struct FxElemVelStateInFrame
{
  FxElemVec3Range velocity;
  FxElemVec3Range totalDelta;
};

/* 6882 */
const struct FxElemVelStateSample
{
  FxElemVelStateInFrame local;
  FxElemVelStateInFrame world;
};

/* 6883 */
struct FxElemVisualState
{
  char color[4];
  float rotationDelta;
  float rotationTotal;
  float size[2];
  float scale;
};

/* 6884 */
const struct FxElemVisStateSample
{
  FxElemVisualState base;
  FxElemVisualState amplitude;
};

/* 6915 */
struct FxElemMarkVisuals
{
  Material *materials[2];
};

/* 6885 */
struct GfxDrawSurfFields
{
  __int64 _bf0;
};

/* 6886 */
union GfxDrawSurf
{
  GfxDrawSurfFields fields;
  unsigned __int64 packed;
};

/* 6887 */
struct __declspec(align(8)) MaterialInfo
{
  const char *name;
  char gameFlags;
  char sortKey;
  char textureAtlasRowCount;
  char textureAtlasColumnCount;
  GfxDrawSurf drawSurf;
  unsigned int surfaceTypeBits;
};

/* 6914 */
#pragma pack(push, 2)
struct Material
{
  MaterialInfo info;
  char stateBitsEntry[26];
  char textureCount;
  char constantCount;
  char stateBitsCount;
  char stateFlags;
  char cameraRegion;
  MaterialTechniqueSet *techniqueSet;
  MaterialTextureDef *textureTable;
  MaterialConstantDef *constantTable;
  GfxStateBits *stateBitsTable;
};
#pragma pack(pop)

/* 6928 */
struct XModelLodInfo
{
  float dist;
  unsigned __int16 numsurfs;
  unsigned __int16 surfIndex;
  int partBits[4];
};

/* 6860 */
struct XModelStreamInfo
{
  XModelHighMipBounds *highMipBounds;
};

/* 6934 */
#pragma pack(push, 4)
struct XModel
{
  const char *name;
  char numBones;
  char numRootBones;
  char numsurfs;
  unsigned __int16 *boneNames;
  char *parentList;
  __int16 *quats;
  float *trans;
  char *partClassification;
  DObjAnimMat *baseMat;
  XSurface *surfs;
  Material **materialHandles;
  XModelLodInfo lodInfo[4];
  XModelCollSurf_s *collSurfs;
  int numCollSurfs;
  int contents;
  XBoneInfo *boneInfo;
  float radius;
  float mins[3];
  float maxs[3];
  __int16 numLods;
  __int16 collLod;
  XModelStreamInfo streamInfo;
  int memUsage;
  char flags;
  PhysPreset *physPreset;
  PhysGeomList *physGeoms;
};
#pragma pack(pop)

/* 6940 */
struct FxTrailDef
{
  int scrollTimeMsec;
  int repeatDist;
  int splitDist;
  int vertCount;
  FxTrailVertex *verts;
  int indCount;
  unsigned __int16 *inds;
};

/* 6888 */
#pragma pack(push, 2)
struct MaterialTechniqueSet
{
  const char *name;
  char worldVertFormat;
  char unused[2];
  MaterialTechniqueSet *remappedTechniqueSet;
  MaterialTechnique *techniques[26];
};
#pragma pack(pop)

/* 6910 */
union MaterialTextureDefInfo
{
  GfxImage *image;
  MaterialWaterDef *water;
};

/* 6911 */
struct MaterialTextureDef
{
  unsigned int nameHash;
  char nameStart;
  char nameEnd;
  char samplerState;
  char semantic;
  MaterialTextureDefInfo u;
};

/* 6912 */
struct MaterialConstantDef
{
  unsigned int nameHash;
  char name[12];
  float literal[4];
};

/* 6913 */
struct GfxStateBits
{
  unsigned int loadBits[2];
};

/* 6916 */
struct DObjAnimMat
{
  float quat[4];
  float trans[3];
  float transWeight;
};

/* 6917 */
struct XSurfaceVertexInfo
{
  __int16 vertCount[4];
  unsigned __int16 *vertsBlend;
};

/* 1161 */
struct D3DResource
{
  unsigned int Common;
  unsigned int ReferenceCount;
  unsigned int Fence;
  unsigned int ReadFence;
  unsigned int Identifier;
  unsigned int BaseFlush;
};

/* 1291 */
struct $38DAE03C5F32738BE3C3EF16C20C38D7
{
  _BYTE gap0[4];
  int _bf4;
};

/* 1292 */
union GPUVERTEX_FETCH_CONSTANT
{
  unsigned int dword[2];
  $38DAE03C5F32738BE3C3EF16C20C38D7 _s1;
};

/* 1437 */
struct D3DVertexBuffer
{
  D3DResource baseclass_0;
  GPUVERTEX_FETCH_CONSTANT Format;
};

/* 1438 */
struct D3DIndexBuffer
{
  D3DResource baseclass_0;
  unsigned int Address;
  unsigned int Size;
};

/* 6927 */
#pragma pack(push, 4)
struct XSurface
{
  char tileMode;
  _BOOL1 deformed;
  unsigned __int16 vertCount;
  unsigned __int16 triCount;
  unsigned __int16 *triIndices;
  XSurfaceVertexInfo vertInfo;
  D3DVertexBuffer vb;
  GfxPackedVertex *verts;
  unsigned int vertListCount;
  XRigidVertList *vertList;
  D3DIndexBuffer indexBuffer;
  int partBits[4];
};
#pragma pack(pop)

/* 6929 */
struct XModelCollSurf_s
{
  float mins[3];
  float maxs[3];
  int boneIdx;
  int contents;
  int surfFlags;
};

/* 6930 */
struct XBoneInfo
{
  float bounds[2][3];
  float offset[3];
  float radiusSquared;
};

/* 6834 */
struct XModelHighMipBounds
{
  float mins[3];
  float maxs[3];
};

/* 6931 */
#pragma pack(push, 4)
struct PhysPreset
{
  const char *name;
  int type;
  float mass;
  float bounce;
  float friction;
  float bulletForceScale;
  float explosiveForceScale;
  const char *sndAliasPrefix;
  float piecesSpreadFraction;
  float piecesUpwardVelocity;
  _BOOL1 tempDefaultToCylinder;
};
#pragma pack(pop)

/* 6863 */
struct PhysMass
{
  float centerOfMass[3];
  float momentsOfInertia[3];
  float productsOfInertia[3];
};

/* 6933 */
struct PhysGeomList
{
  unsigned int count;
  PhysGeomInfo *geoms;
  PhysMass mass;
};

/* 6939 */
struct FxTrailVertex
{
  float pos[2];
  float normal[2];
  float texCoord;
};

/* 6901 */
#pragma pack(push, 4)
struct MaterialPass
{
  MaterialVertexDeclaration *vertexDecl;
  MaterialVertexShader *vertexShaderArray[15];
  MaterialVertexShader *vertexShader;
  MaterialPixelShader *pixelShader;
  char perPrimArgCount;
  char perObjArgCount;
  char stableArgCount;
  char customSamplerFlags;
  char precompiledIndex;
  MaterialShaderArgument *args;
};
#pragma pack(pop)

/* 6902 */
struct MaterialTechnique
{
  const char *name;
  unsigned __int16 flags;
  unsigned __int16 passCount;
  MaterialPass passArray[1];
};

/* 872 */
enum MapType
{
  MAPTYPE_NONE = 0x0,
  MAPTYPE_INVALID1 = 0x1,
  MAPTYPE_INVALID2 = 0x2,
  MAPTYPE_2D = 0x3,
  MAPTYPE_3D = 0x4,
  MAPTYPE_CUBE = 0x5,
  MAPTYPE_COUNT = 0x6,
};

/* 6903 */
union GfxTexture
{
  D3DBaseTexture *basemap;
  D3DTexture *map;
  D3DVolumeTexture *volmap;
  D3DCubeTexture *cubemap;
  GfxImageLoadDef *loadDef;
};

/* 6905 */
struct CardMemory
{
  int platform[1];
};

/* 6906 */
struct GfxImage
{
  MapType mapType;
  GfxTexture texture;
  char semantic;
  __declspec(align(4)) CardMemory cardMemory;
  unsigned __int16 width;
  unsigned __int16 height;
  unsigned __int16 depth;
  char category;
  __declspec(align(2)) char *pixels;
  unsigned int baseSize;
  unsigned __int16 streamSlot;
  _BOOL1 streaming;
  __declspec(align(2)) const char *name;
};

/* 6909 */
struct MaterialWaterDef
{
  int textureWidth;
  float horizontalWorldLength;
  float verticalWorldLength;
  float amplitude;
  float windSpeed;
  float windDirection[2];
  water_t *map;
};

/* 6918 */
union GfxColor
{
  unsigned int packed;
  char array[4];
};

/* 6919 */
union PackedTexCoords
{
  unsigned int packed;
};

/* 6920 */
union PackedUnitVec
{
  unsigned int packed;
};

/* 6921 */
struct GfxPackedVertex
{
  float xyz[3];
  float binormalSign;
  GfxColor color;
  PackedTexCoords texCoord;
  PackedUnitVec normal;
  PackedUnitVec tangent;
};

/* 6926 */
struct XRigidVertList
{
  unsigned __int16 boneOffset;
  unsigned __int16 vertCount;
  unsigned __int16 triOffset;
  unsigned __int16 triCount;
  XSurfaceCollisionTree *collisionTree;
};

/* 6932 */
struct PhysGeomInfo
{
  BrushWrapper *brush;
  int type;
  float orientation[3][3];
  float offset[3];
  float halfLengths[3];
};

/* 6889 */
struct MaterialStreamRouting
{
  char source;
  char dest;
};

/* 6890 */
union MaterialVertexStreamRouting
{
  MaterialStreamRouting data[16];
  D3DVertexDeclaration *decl[15];
};

/* 6891 */
struct MaterialVertexDeclaration
{
  char streamCount;
  _BOOL1 hasOptionalSource;
  __declspec(align(4)) MaterialVertexStreamRouting routing;
};

/* 6892 */
struct GfxVertexShaderLoadDef
{
  char *cachedPart;
  char *physicalPart;
  unsigned __int16 cachedPartSize;
  unsigned __int16 physicalPartSize;
};

/* 6893 */
union MaterialVertexShaderProgram
{
  D3DVertexShader *vs;
  GfxVertexShaderLoadDef loadDef;
};

/* 6894 */
struct MaterialVertexShader
{
  const char *name;
  MaterialVertexShaderProgram prog;
};

/* 6895 */
struct GfxPixelShaderLoadDef
{
  char *cachedPart;
  char *physicalPart;
  unsigned __int16 cachedPartSize;
  unsigned __int16 physicalPartSize;
};

/* 6896 */
union MaterialPixelShaderProgram
{
  D3DPixelShader *ps;
  GfxPixelShaderLoadDef loadDef;
};

/* 6897 */
struct MaterialPixelShader
{
  const char *name;
  MaterialPixelShaderProgram prog;
};

/* 6898 */
struct MaterialArgumentCodeConst
{
  unsigned __int16 index;
  char firstRow;
  char rowCount;
};

/* 6899 */
union MaterialArgumentDef
{
  const float *literalConst;
  MaterialArgumentCodeConst codeConst;
  unsigned int codeSampler;
  unsigned int nameHash;
};

/* 6900 */
struct MaterialShaderArgument
{
  unsigned __int16 type;
  unsigned __int16 dest;
  MaterialArgumentDef u;
};

/* 1162 */
struct GPUTEXTURESIZE_1D
{
  int _bf0;
};

/* 1163 */
struct GPUTEXTURESIZE_2D
{
  int _bf0;
};

/* 1164 */
struct GPUTEXTURESIZE_3D
{
  int _bf0;
};

/* 1165 */
struct GPUTEXTURESIZE_STACK
{
  int _bf0;
};

/* 1166 */
union $C243C4D674053518C29CA6FB76C53DA7
{
  GPUTEXTURESIZE_1D OneD;
  GPUTEXTURESIZE_2D TwoD;
  GPUTEXTURESIZE_3D ThreeD;
  GPUTEXTURESIZE_STACK Stack;
};

/* 1167 */
struct $203442968A7C58FC8B11ECBFF1D33929
{
  _BYTE gap0[4];
  int _bf4;
  $C243C4D674053518C29CA6FB76C53DA7 Size;
  _BYTE gapc[8];
  int _bf20;
};

/* 1168 */
union GPUTEXTURE_FETCH_CONSTANT
{
  unsigned int dword[6];
  $203442968A7C58FC8B11ECBFF1D33929 _s1;
};

/* 1169 */
struct D3DBaseTexture
{
  D3DResource baseclass_0;
  unsigned int MipFlush;
  GPUTEXTURE_FETCH_CONSTANT Format;
};

/* 1523 */
struct D3DTexture
{
  D3DBaseTexture baseclass_0;
};

/* 1411 */
struct D3DVolumeTexture
{
  D3DBaseTexture baseclass_0;
};

/* 1170 */
struct D3DCubeTexture
{
  D3DBaseTexture baseclass_0;
};

/* 6904 */
struct GfxImageLoadDef
{
  char levelCount;
  char flags;
  __int16 dimensions[3];
  int format;
  GfxTexture texture;
};

/* 6907 */
struct WaterWritable
{
  float floatTime;
};

/* 6908 */
struct water_t
{
  WaterWritable writable;
  float *H0X;
  float *H0Y;
  float *wTerm;
  int M;
  int N;
  float Lx;
  float Lz;
  float gravity;
  float windvel;
  float winddir[2];
  float amplitude;
  float codeConstant[4];
  GfxImage *image;
};

/* 6925 */
struct XSurfaceCollisionTree
{
  float trans[3];
  float scale[3];
  unsigned int nodeCount;
  XSurfaceCollisionNode *nodes;
  unsigned int leafCount;
  XSurfaceCollisionLeaf *leafs;
};

/* 6846 */
#pragma pack(push, 4)
struct BrushWrapper
{
  float mins[3];
  int contents;
  float maxs[3];
  unsigned int numsides;
  cbrushside_t *sides;
  __int16 axialMaterialNum[2][3];
  char *baseAdjacentSide;
  __int16 firstAdjacentSideOffsets[2][3];
  char edgeCount[2][3];
  int totalEdgeCount;
  cplane_s *planes;
};
#pragma pack(pop)

/* 1197 */
struct D3DVertexDeclaration
{
  D3DResource baseclass_0;
};

/* 1377 */
struct D3DVertexShader
{
  D3DResource baseclass_0;
};

/* 1260 */
struct D3DPixelShader
{
  D3DResource baseclass_0;
};

/* 6922 */
struct XSurfaceCollisionAabb
{
  unsigned __int16 mins[3];
  unsigned __int16 maxs[3];
};

/* 6923 */
struct XSurfaceCollisionNode
{
  XSurfaceCollisionAabb aabb;
  unsigned __int16 childBeginIndex;
  unsigned __int16 childCount;
};

/* 6924 */
struct XSurfaceCollisionLeaf
{
  unsigned __int16 triangleBeginIndex;
};

/* 6832 */
#pragma pack(push, 2)
struct cbrushside_t
{
  cplane_s *plane;
  unsigned int materialNum;
  __int16 firstAdjacentSideOffset;
  char edgeCount;
};
#pragma pack(pop)

/* 7091 */
#pragma pack(push, 4)
struct Bone
{
  int parentBone;
  char animBones[2];
  int rigidBody;
  float length;
  float center[3];
};
#pragma pack(pop)

/* 7094 */
struct BoneOrientation
{
  float origin[3];
  int boneFlags;
  float orientation[4];
};

/* 766 */
enum PhysicsGeomType
{
  PHYS_GEOM_NONE = 0x0,
  PHYS_GEOM_BOX = 0x1,
  PHYS_GEOM_BRUSHMODEL = 0x2,
  PHYS_GEOM_BRUSH = 0x3,
  PHYS_GEOM_CYLINDER = 0x4,
  PHYS_GEOM_CAPSULE = 0x5,
  PHYS_GEOM_COUNT = 0x6,
};

/* 7096 */
#pragma pack(push, 4)
struct BoneDef
{
  char animBoneTextNames[2][20];
  unsigned int animBoneNames[2];
  float radius;
  _BOOL1 mirror;
  float percent;
  float mass;
  float friction;
  int parentBone;
  PhysicsGeomType geomType;
};
#pragma pack(pop)

/* 690 */
enum OffhandSecondaryClass
{
  PLAYER_OFFHAND_SECONDARY_SMOKE = 0x0,
  PLAYER_OFFHAND_SECONDARY_FLASH = 0x1,
  PLAYER_OFFHAND_SECONDARIES_TOTAL = 0x2,
};

/* 691 */
enum ViewLockTypes
{
  PLAYERVIEWLOCK_NONE = 0x0,
  PLAYERVIEWLOCK_FULL = 0x1,
  PLAYERVIEWLOCK_WEAPONJITTER = 0x2,
  PLAYERVIEWLOCKCOUNT = 0x3,
};

/* 6848 */
struct SprintState
{
  int sprintButtonUpRequired;
  int sprintDelay;
  int lastSprintStart;
  int lastSprintEnd;
  int sprintStartMaxLength;
};

/* 6849 */
struct MantleState
{
  float yaw;
  int timer;
  int transIndex;
  int flags;
};

/* 692 */
enum ActionSlotType
{
  ACTIONSLOTTYPE_DONOTHING = 0x0,
  ACTIONSLOTTYPE_SPECIFYWEAPON = 0x1,
  ACTIONSLOTTYPE_ALTWEAPONTOGGLE = 0x2,
  ACTIONSLOTTYPE_NIGHTVISION = 0x3,
  ACTIONSLOTTYPECOUNT = 0x4,
};

/* 6850 */
struct ActionSlotParam_SpecifyWeapon
{
  unsigned int index;
};

/* 6851 */
struct ActionSlotParam
{
  ActionSlotParam_SpecifyWeapon specifyWeapon;
};

/* 752 */
enum objectiveState_t
{
  OBJST_EMPTY = 0x0,
  OBJST_ACTIVE = 0x1,
  OBJST_INVISIBLE = 0x2,
  OBJST_DONE = 0x3,
  OBJST_CURRENT = 0x4,
  OBJST_FAILED = 0x5,
  OBJST_NUMSTATES = 0x6,
};

/* 6852 */
struct objective_t
{
  objectiveState_t state;
  float origin[3];
  int entNum;
  int teamNum;
  int icon;
};

/* 757 */
enum he_type_t
{
  HE_TYPE_FREE = 0x0,
  HE_TYPE_TEXT = 0x1,
  HE_TYPE_VALUE = 0x2,
  HE_TYPE_PLAYERNAME = 0x3,
  HE_TYPE_MAPNAME = 0x4,
  HE_TYPE_GAMETYPE = 0x5,
  HE_TYPE_MATERIAL = 0x6,
  HE_TYPE_TIMER_DOWN = 0x7,
  HE_TYPE_TIMER_UP = 0x8,
  HE_TYPE_TENTHS_TIMER_DOWN = 0x9,
  HE_TYPE_TENTHS_TIMER_UP = 0xA,
  HE_TYPE_CLOCK_DOWN = 0xB,
  HE_TYPE_CLOCK_UP = 0xC,
  HE_TYPE_WAYPOINT = 0xD,
  HE_TYPE_COUNT = 0xE,
};

/* 6853 */
struct $C96EA5EC2ACBB9C0BF22693F316ACC67
{
  char r;
  char g;
  char b;
  char a;
};

/* 6854 */
union hudelem_color_t
{
  $C96EA5EC2ACBB9C0BF22693F316ACC67 _s0;
  int rgba;
};

/* 6855 */
struct hudelem_s
{
  he_type_t type;
  float x;
  float y;
  float z;
  float fontScale;
  int font;
  int alignOrg;
  int alignScreen;
  hudelem_color_t color;
  hudelem_color_t fromColor;
  int fadeStartTime;
  int fadeTime;
  int label;
  int width;
  int height;
  int materialIndex;
  int fromWidth;
  int fromHeight;
  int scaleStartTime;
  int scaleTime;
  float fromX;
  float fromY;
  int fromAlignOrg;
  int fromAlignScreen;
  int moveStartTime;
  int moveTime;
  int time;
  int duration;
  float value;
  int text;
  float sort;
  hudelem_color_t glowColor;
  int fxBirthTime;
  int fxLetterTime;
  int fxDecayStartTime;
  int fxDecayDuration;
  int soundID;
  int flags;
};

/* 6856 */
struct $34F5FF81F22F064F6056100ACF350368
{
  hudelem_s current[31];
  hudelem_s archival[31];
};

struct hud_t
{
	hudelem_s current[31];
	hudelem_s archival[31];
};

/* 6857 */
struct playerState_s
{
  int commandTime;
  int pm_type;
  int bobCycle;
  int pm_flags;
  int weapFlags;
  int otherFlags;
  int pm_time;
  float origin[3];
  float velocity[3];
  float oldVelocity[2];
  int weaponTime;
  int weaponDelay;
  int grenadeTimeLeft;
  int throwBackGrenadeOwner;
  int throwBackGrenadeTimeLeft;
  int weaponRestrictKickTime;
  int foliageSoundTime;
  int gravity;
  float leanf;
  int speed;
  float delta_angles[3];
  int groundEntityNum;
  float vLadderVec[3];
  int jumpTime;
  float jumpOriginZ;
  int legsTimer;
  int legsAnim;
  int torsoTimer;
  int torsoAnim;
  int legsAnimDuration;
  int torsoAnimDuration;
  int damageTimer;
  int damageDuration;
  int flinchYawAnim;
  int movementDir;
  int eFlags;
  int eventSequence;
  int events[4];
  unsigned int eventParms[4];
  int oldEventSequence;
  int clientNum;
  int offHandIndex;
  OffhandSecondaryClass offhandSecondary;
  unsigned int weapon;
  int weaponstate;
  unsigned int weaponShotCount;
  float fWeaponPosFrac;
  int adsDelayTime;
  int spreadOverride;
  int spreadOverrideState;
  int viewmodelIndex;
  float viewangles[3];
  int viewHeightTarget;
  float viewHeightCurrent;
  int viewHeightLerpTime;
  int viewHeightLerpTarget;
  int viewHeightLerpDown;
  float viewAngleClampBase[2];
  float viewAngleClampRange[2];
  int damageEvent;
  int damageYaw;
  int damagePitch;
  int damageCount;
  int stats[5];
  int ammo[128];
  int ammoclip[128];
  unsigned int weapons[4];
  unsigned int weaponold[4];
  unsigned int weaponrechamber[4];
  float proneDirection;
  float proneDirectionPitch;
  float proneTorsoPitch;
  ViewLockTypes viewlocked;
  int viewlocked_entNum;
  int cursorHint;
  int cursorHintString;
  int cursorHintEntIndex;
  int iCompassPlayerInfo;
  int radarEnabled;
  int locationSelectionInfo;
  SprintState sprintState;
  float fTorsoPitch;
  float fWaistPitch;
  float holdBreathScale;
  int holdBreathTimer;
  float moveSpeedScaleMultiplier;
  MantleState mantleState;
  float meleeChargeYaw;
  int meleeChargeDist;
  int meleeChargeTime;
  int perks;
  ActionSlotType actionSlotType[4];
  ActionSlotParam actionSlotParam[4];
  int entityEventSequence;
  int weapAnim;
  float aimSpreadScale;
  int shellshockIndex;
  int shellshockTime;
  int shellshockDuration;
  float dofNearStart;
  float dofNearEnd;
  float dofFarStart;
  float dofFarEnd;
  float dofNearBlur;
  float dofFarBlur;
  int hudElemLastAssignedSoundID;
  objective_t objective[16];
  char weaponmodels[128];
  int deltaTime;
  hud_t hud;
};

/* 740 */
enum trType_t
{
  TR_STATIONARY = 0x0,
  TR_INTERPOLATE = 0x1,
  TR_LINEAR = 0x2,
  TR_LINEAR_STOP = 0x3,
  TR_SINE = 0x4,
  TR_GRAVITY = 0x5,
  TR_ACCELERATE = 0x6,
  TR_DECELERATE = 0x7,
  TR_PHYSICS = 0x8,
  TR_RAGDOLL = 0x9,
};

/* 6867 */
struct trajectory_t
{
  trType_t trType;
  int trTime;
  int trDuration;
  float trBase[3];
  float trDelta[3];
};

/* 6838 */
struct LerpEntityStateTurret
{
  float gunAngles[3];
};

/* 6836 */
struct LerpEntityStateLoopFx
{
  float cullDist;
  int period;
};

/* 6842 */
struct LerpEntityStatePrimaryLight
{
  char colorAndExp[4];
  float intensity;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
};

/* 6835 */
struct LerpEntityStatePlayer
{
  float leanf;
  int movementDir;
};

/* 6831 */
struct LerpEntityStateVehicle
{
  float bodyPitch;
  float bodyRoll;
  float steerYaw;
  int materialTime;
  float gunPitch;
  float gunYaw;
  int team;
};

/* 6843 */
struct LerpEntityStateMissile
{
  int launchTime;
};

/* 6844 */
struct LerpEntityStateSoundBlend
{
  float lerp;
};

/* 6841 */
struct LerpEntityStateBulletHit
{
  float start[3];
};

/* 6830 */
struct LerpEntityStateEarthquake
{
  float scale;
  float radius;
  int duration;
};

/* 6837 */
struct LerpEntityStateCustomExplode
{
  int startTime;
};

/* 6840 */
struct LerpEntityStateExplosion
{
  float innerRadius;
  float magnitude;
};

/* 6845 */
struct LerpEntityStateExplosionJolt
{
  float innerRadius;
  float impulse[3];
};

/* 6833 */
struct LerpEntityStatePhysicsJitter
{
  float innerRadius;
  float minDisplacement;
  float maxDisplacement;
};

/* 6839 */
struct LerpEntityStateAnonymous
{
  int data[7];
};

/* 6859 */
union LerpEntityStateTypeUnion
{
  LerpEntityStateTurret turret;
  LerpEntityStateLoopFx loopFx;
  LerpEntityStatePrimaryLight primaryLight;
  LerpEntityStatePlayer player;
  LerpEntityStateVehicle vehicle;
  LerpEntityStateMissile missile;
  LerpEntityStateSoundBlend soundBlend;
  LerpEntityStateBulletHit bulletHit;
  LerpEntityStateEarthquake earthquake;
  LerpEntityStateCustomExplode customExplode;
  LerpEntityStateExplosion explosion;
  LerpEntityStateExplosionJolt explosionJolt;
  LerpEntityStatePhysicsJitter physicsJitter;
  LerpEntityStateAnonymous anonymous;
};

/* 6868 */
struct LerpEntityState
{
  int eFlags;
  trajectory_t pos;
  trajectory_t apos;
  LerpEntityStateTypeUnion u;
};

/* 6869 */
union $C889CF518587CB2833BFE41358FA5E4A
{
  int brushmodel;
  int item;
  int xmodel;
  int primaryLight;
};

/* 6870 */
union $0AC61FC53F35A99FE97BBC85FAE448D4
{
  int scale;
  int eventParm2;
  int helicopterStage;
};

/* 6871 */
union $F0982110E72E88EB10C2A75E8CDE34E2
{
  int hintString;
  int grenadeInPickupRange;
  int vehicleXModel;
};

/* 6872 */
struct entityState_s
{
  int number;
  int eType;
  LerpEntityState lerp;
  int time2;
  int otherEntityNum;
  int attackerEntityNum;
  int groundEntityNum;
  int loopSound;
  int surfType;
  $C889CF518587CB2833BFE41358FA5E4A index;
  int clientNum;
  int iHeadIcon;
  int iHeadIconTeam;
  int solid;
  unsigned int eventParm;
  int eventSequence;
  int events[4];
  int eventParms[4];
  int weapon;
  int weaponModel;
  int legsAnim;
  int torsoAnim;
  $0AC61FC53F35A99FE97BBC85FAE448D4 un1;
  $F0982110E72E88EB10C2A75E8CDE34E2 un2;
  float fTorsoPitch;
  float fWaistPitch;
  int partBits[4];
};

/* 741 */
enum team_t
{
  TEAM_FREE = 0x0,
  TEAM_AXIS = 0x1,
  TEAM_ALLIES = 0x2,
  TEAM_SPECTATOR = 0x3,
  TEAM_NUM_TEAMS = 0x4,
};

/* 6847 */
struct clientState_s
{
  int clientIndex;
  team_t team;
  int modelindex;
  int attachModelIndex[6];
  int attachTagIndex[6];
  char name[32];
  float maxSprintTimeMultiplier;
  int rank;
  int perks;
  int voiceConnectivityBits;
  int clanIndex;
  char clanAbbrev[8];
  int attachedVehEntNum;
  int attachedVehSlotIndex;
};

/* 7102 */
struct snapshot_s
{
  int snapFlags;
  int ping;
  int serverTime;
  playerState_s ps;
  int numEntities;
  int numClients;
  entityState_s entities[512];
  clientState_s clients[24];
  int serverCommandSequence;
};

/* 7103 */
#pragma pack(push, 2)
struct centity_s
{
  cpose_t pose;
  LerpEntityState currentState;
  entityState_s nextState;
  _BOOL1 nextValid;
  _BOOL1 bMuzzleFlash;
  _BOOL1 bTrailMade;
  int previousEventSequence;
  int miscTime;
  float lightingOrigin[3];
  XAnimTree_s *tree;
};
#pragma pack(pop)

/* 7073 */
#pragma pack(push, 4)
struct XAnimTree_s
{
  XAnim_s *anims;
  unsigned __int16 children;
};
#pragma pack(pop)

/* 7069 */
struct XAnimParent
{
  unsigned __int16 flags;
  unsigned __int16 children;
};

/* 7070 */
union $C64BF0E2E445847BA8C25E12A01DD591
{
  XAnimParts *parts;
  XAnimParent animParent;
};

/* 7071 */
struct XAnimEntry
{
  unsigned __int16 numAnims;
  unsigned __int16 parent;
  $C64BF0E2E445847BA8C25E12A01DD591 ___u2;
};

/* 7072 */
struct XAnim_s
{
  const char *debugName;
  unsigned int size;
  const char **debugAnimNames;
  XAnimEntry entries[1];
};

/* 6955 */
union XAnimIndices
{
  char *_1;
  unsigned __int16 *_2;
  void *data;
};

/* 6966 */
#pragma pack(push, 4)
struct XAnimParts
{
  const char *name;
  unsigned __int16 dataByteCount;
  unsigned __int16 dataShortCount;
  unsigned __int16 dataIntCount;
  unsigned __int16 randomDataByteCount;
  unsigned __int16 randomDataIntCount;
  unsigned __int16 numframes;
  _BOOL1 bLoop;
  _BOOL1 bDelta;
  char boneCount[12];
  char notifyCount;
  char assetType;
  _BOOL1 pad;
  unsigned int randomDataShortCount;
  unsigned int indexCount;
  float framerate;
  float frequency;
  unsigned __int16 *names;
  char *dataByte;
  __int16 *dataShort;
  int *dataInt;
  __int16 *randomDataShort;
  char *randomDataByte;
  int *randomDataInt;
  XAnimIndices indices;
  XAnimNotifyInfo *notify;
  XAnimDeltaPart *deltaPart;
};
#pragma pack(pop)

/* 6956 */
#pragma pack(push, 4)
struct XAnimNotifyInfo
{
  unsigned __int16 name;
  float time;
};
#pragma pack(pop)

/* 6965 */
struct XAnimDeltaPart
{
  XAnimPartTrans *trans;
  XAnimDeltaPartQuat *quat;
};

/* 6957 */
union XAnimDynamicFrames
{
  char (*_1)[3];
  unsigned __int16 (*_2)[3];
};

/* 6958 */
union XAnimDynamicIndices
{
  char _1[1];
  unsigned __int16 _2[1];
};

/* 6959 */
#pragma pack(push, 4)
struct XAnimPartTransFrames
{
  float mins[3];
  float size[3];
  XAnimDynamicFrames frames;
  XAnimDynamicIndices indices;
};
#pragma pack(pop)

/* 6960 */
union XAnimPartTransData
{
  XAnimPartTransFrames frames;
  float frame0[3];
};

/* 6961 */
struct XAnimPartTrans
{
  unsigned __int16 size;
  char smallTrans;
  __declspec(align(2)) XAnimPartTransData u;
};

/* 6962 */
#pragma pack(push, 4)
struct XAnimDeltaPartQuatDataFrames
{
  __int16 (*frames)[2];
  XAnimDynamicIndices indices;
};
#pragma pack(pop)

/* 6963 */
union XAnimDeltaPartQuatData
{
  XAnimDeltaPartQuatDataFrames frames;
  __int16 frame0[2];
};

/* 6964 */
struct XAnimDeltaPartQuat
{
  unsigned __int16 size;
  __declspec(align(4)) XAnimDeltaPartQuatData u;
};

/* 7104 */
struct playerEntity_t
{
  float fLastWeaponPosFrac;
  int bPositionToADS;
  float vPositionLastOrg[3];
  float fLastIdleFactor;
  float vLastMoveOrg[3];
  float vLastMoveAng[3];
};

/* 7105 */
struct GfxDepthOfField
{
  float viewModelStart;
  float viewModelEnd;
  float nearStart;
  float nearEnd;
  float farStart;
  float farEnd;
  float nearBlur;
  float farBlur;
};

/* 7106 */
#pragma pack(push, 4)
struct GfxFilm
{
  _BOOL1 enabled;
  float brightness;
  float contrast;
  float desaturation;
  _BOOL1 invert;
  float tintDark[3];
  float tintLight[3];
};
#pragma pack(pop)

/* 7107 */
#pragma pack(push, 4)
struct GfxGlow
{
  _BOOL1 enabled;
  float bloomCutoff;
  float bloomDesaturation;
  float bloomIntensity;
  float radius;
};
#pragma pack(pop)

/* 7010 */
struct GfxLight
{
  char type;
  char canUseShadowMap;
  char unused[2];
  float color[3];
  float dir[3];
  float origin[3];
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
  int exponent;
  unsigned int spotShadowIndex;
  GfxLightDef *def;
};

/* 7108 */
struct refdef_s
{
  unsigned int x;
  unsigned int y;
  unsigned int width;
  unsigned int height;
  float tanHalfFovX;
  float tanHalfFovY;
  float vieworg[3];
  float viewaxis[3][3];
  float viewOffset[3];
  int time;
  float zNear;
  float blurRadius;
  GfxDepthOfField dof;
  GfxFilm film;
  GfxGlow glow;
  GfxLight primaryLights[255];
  int localClientNum;
};

/* 7008 */
#pragma pack(push, 4)
struct GfxLightImage
{
  GfxImage *image;
  char samplerState;
};
#pragma pack(pop)

/* 7009 */
struct GfxLightDef
{
  const char *name;
  GfxLightImage attenuation;
  int lmapLookupStart;
};

/* 7109 */
struct score_t
{
  int client;
  int score;
  int ping;
  int deaths;
  int team;
  int kills;
  int rank;
  int assists;
  Material *hStatusIcon;
  Material *hRankIcon;
};

/* 7110 */
struct viewDamage_t
{
  int time;
  int duration;
  float yaw;
};

/* 777 */
enum ShockViewTypes
{
  SHELLSHOCK_VIEWTYPE_BLURRED = 0x0,
  SHELLSHOCK_VIEWTYPE_FLASHED = 0x1,
};

/* 7111 */
struct $90E088F7D9852BC881D65DE98AF171B5
{
  int blurredFadeTime;
  int blurredEffectTime;
  int flashWhiteFadeTime;
  int flashShotFadeTime;
  ShockViewTypes type;
};

/* 7112 */
struct $B32C35443884083D3CC13DCD5C8D7874
{
  int fadeTime;
  float kickRate;
  float kickRadius;
};

/* 7113 */
#pragma pack(push, 4)
struct $BB49F567345206243E5FA1966A93D537
{
  _BOOL1 affect;
  char loop[64];
  char loopSilent[64];
  char end[64];
  char endAbort[64];
  int fadeInTime;
  int fadeOutTime;
  float drylevel;
  float wetlevel;
  char roomtype[16];
  float channelvolume[64];
  int modEndDelay;
  int loopFadeTime;
  int loopEndDelay;
};
#pragma pack(pop)

/* 7114 */
#pragma pack(push, 4)
struct $402D1EFD93F6BABF9B68495BCC143889
{
  _BOOL1 affect;
  int fadeTime;
  float mouseSensitivity;
  float maxPitchSpeed;
  float maxYawSpeed;
};
#pragma pack(pop)

/* 7115 */
struct $4F7202F91A0F7FC1D7CB9F222DD944AF
{
  _BOOL1 affect;
};

/* 7116 */
#pragma pack(push, 4)
const struct shellshock_parms_t
{
  $90E088F7D9852BC881D65DE98AF171B5 screenBlend;
  $B32C35443884083D3CC13DCD5C8D7874 view;
  $BB49F567345206243E5FA1966A93D537 sound;
  $402D1EFD93F6BABF9B68495BCC143889 lookControl;
  $4F7202F91A0F7FC1D7CB9F222DD944AF movement;
};
#pragma pack(pop)

/* 7117 */
struct shellshock_t
{
  shellshock_parms_t *parms;
  int startTime;
  int duration;
  int loopEndTime;
  float sensitivity;
  float viewDelta[2];
  int hasSavedScreen;
};

/* 7119 */
#pragma pack(push, 8)
struct animation_s
{
  char name[64];
  int initialLerp;
  float moveSpeed;
  int duration;
  int nameHash;
  int flags;
  __int64 movetype;
  int noteType;
};
#pragma pack(pop)

/* 7131 */
struct lerpFrame_t
{
  float yawAngle;
  int yawing;
  float pitchAngle;
  int pitching;
  int animationNumber;
  animation_s *animation;
  int animationTime;
  float oldFramePos[3];
  float animSpeedScale;
  int oldFrameSnapshotTime;
};

/* 7132 */
#pragma pack(push, 4)
struct clientInfo_t
{
  int infoValid;
  int nextValid;
  int clientNum;
  char name[32];
  team_t team;
  team_t oldteam;
  char clanIndex;
  char clanAbbrev[8];
  int score;
  int location;
  int health;
  char model[64];
  char attachModelNames[6][64];
  char attachTagNames[6][64];
  lerpFrame_t legs;
  lerpFrame_t torso;
  float lerpMoveDir;
  float lerpLean;
  float playerAngles[3];
  int leftHandGun;
  int dobjDirty;
  clientControllers_t control;
  unsigned int clientConditions[10][2];
  XAnimTree_s *pXAnimTree;
  int iDObjWeapon;
  char weaponModel;
  int stanceTransitionTime;
  int turnAnimEndTime;
  char turnAnimType;
  int attachedVehEntNum;
  int attachedVehSlotIndex;
  _BOOL1 hideWeapon;
  _BOOL1 usingKnife;
};
#pragma pack(pop)

/* 7123 */
struct animScript_t
{
  int numItems;
  animScriptItem_t *items[128];
};

/* 7120 */
struct animScriptCondition_t
{
  int index;
  unsigned int value[2];
};

/* 7121 */
struct animScriptCommand_t
{
  __int16 bodyPart[2];
  __int16 animIndex[2];
  __int16 animDuration[2];
  snd_alias_list_t *soundAlias;
};

/* 7122 */
struct animScriptItem_t
{
  int numConditions;
  animScriptCondition_t conditions[10];
  int numCommands;
  animScriptCommand_t commands[8];
};

/* 7124 */
struct scr_animtree_t
{
  XAnim_s *anims;
};

/* 7125 */
#pragma pack(push, 8)
struct animScriptData_t
{
  animation_s animations[512];
  unsigned int numAnimations;
  animScript_t scriptAnims[1][43];
  animScript_t scriptCannedAnims[1][43];
  animScript_t scriptStateChange[1][1];
  animScript_t scriptEvents[21];
  animScriptItem_t scriptItems[2048];
  int numScriptItems;
  scr_animtree_t animTree;
  unsigned __int16 torsoAnim;
  unsigned __int16 legsAnim;
  unsigned __int16 turningAnim;
  snd_alias_list_t *(__cdecl *soundAlias)(const char *);
  int (__cdecl *playSoundAlias)(int, snd_alias_list_t *);
};
#pragma pack(pop)

/* 7126 */
struct $6CB7272563F4458FB40A4A5E123C4ABA
{
  unsigned __int16 index;
  unsigned __int16 tree;
};

/* 7127 */
union $23929A8C040391BF4D98215C4F78A207
{
  $6CB7272563F4458FB40A4A5E123C4ABA _s0;
  const char *linkPointer;
};

/* 7128 */
struct scr_anim_s
{
  $23929A8C040391BF4D98215C4F78A207 ___u0;
};

/* 7129 */
struct $79A9D369383989627F425BDAFFD092C2
{
  scr_animtree_t tree;
  scr_anim_s torso;
  scr_anim_s legs;
  scr_anim_s turning;
};

/* 7133 */
struct bgs_t
{
  animScriptData_t animScriptData;
  $79A9D369383989627F425BDAFFD092C2 generic_human;
  int time;
  int latestSnapshotTime;
  int frametime;
  int anim_user;
  XModel *(__cdecl *GetXModel)(const char *);
  void (__cdecl *CreateDObj)(DObjModel_s *, unsigned __int16, XAnimTree_s *, int, int, clientInfo_t *);
  unsigned __int16 (__cdecl *AttachWeapon)(DObjModel_s *, unsigned __int16, clientInfo_t *);
  DObj_s *(__cdecl *GetDObj)(int, int);
  void (__cdecl *SafeDObjFree)(int, int);
  void *(__cdecl *AllocXAnim)(int);
  clientInfo_t clientinfo[24];
};

/* 6801 */
struct snd_alias_list_t
{
  const char *aliasName;
  snd_alias_t *head;
  int count;
};

/* 7130 */
#pragma pack(push, 2)
struct DObjModel_s
{
  XModel *model;
  unsigned __int16 boneName;
  _BOOL1 ignoreCollision;
};
#pragma pack(pop)

/* 7074 */
struct DSkelPartBits
{
  int anim[4];
  int control[4];
  int skel[4];
};

/* 7075 */
struct DSkel
{
  DSkelPartBits partBits;
  int timeStamp;
  DObjAnimMat *mat;
};

/* 7076 */
#pragma pack(push, 2)
struct DObj_s
{
  XAnimTree_s *tree;
  unsigned __int16 duplicateParts;
  unsigned __int16 entnum;
  char duplicatePartsSize;
  char numModels;
  char numBones;
  unsigned int ignoreCollision;
  volatile int locked;
  DSkel skel;
  float radius;
  int hidePartBits[4];
  XModel **models;
};
#pragma pack(pop)

/* 6796 */
const struct snd_alias_t
{
  const char *aliasName;
  const char *subtitle;
  const char *secondaryAliasName;
  const char *chainAliasName;
  SoundFile *soundFile;
  int sequence;
  float volMin;
  float volMax;
  float pitchMin;
  float pitchMax;
  float distMin;
  float distMax;
  int flags;
  float slavePercentage;
  float probability;
  float lfePercentage;
  float centerPercentage;
  int startDelay;
  SndCurve *volumeFalloffCurve;
  float envelopMin;
  float envelopMax;
  float envelopPercentage;
  SpeakerMap *speakerMap;
};

/* 720 */
enum snd_alias_type_t
{
  SAT_UNKNOWN = 0x0,
  SAT_LOADED = 0x1,
  SAT_STREAMED = 0x2,
  SAT_PRIMED = 0x3,
  SAT_COUNT = 0x4,
};

/* 6794 */
#pragma pack(push, 4)
struct SoundFile
{
  const char *dir;
  const char *name;
  XaSound *fileMem;
  char isStreamFound;
  snd_alias_type_t type;
};
#pragma pack(pop)

/* 6789 */
struct SndCurve
{
  const char *filename;
  int knotCount;
  float knots[8][2];
};

/* 6335 */
#pragma pack(push, 4)
struct XAUDIOCHANNELMAP
{
  char EntryCount;
  XAUDIOCHANNELMAPENTRY *paEntries;
};
#pragma pack(pop)

/* 6795 */
#pragma pack(push, 4)
struct SpeakerMap
{
  _BOOL1 isDefault;
  const char *name;
  XAUDIOCHANNELMAP channelMaps[2][2];
};
#pragma pack(pop)

/* 6327 */
#pragma pack(push, 4)
struct XMALOOPREGION
{
  unsigned int LoopStart;
  unsigned int LoopEnd;
  char LoopSubframeEnd;
  char LoopSubframeSkip;
};
#pragma pack(pop)

/* 6790 */
struct XAUDIOPACKET_ALIGNED
{
  char *pBuffer;
  unsigned int BufferSize;
  unsigned int LoopCount;
  XMALOOPREGION XMALoop[6];
  char *pContext;
};

/* 6318 */
union $9D91AD7FD1BA7330B7FA3BAC24377F35
{
  char NumStreams;
  char ChannelCount;
};

/* 6317 */
#pragma pack(push, 4)
struct XAUDIOXMAFORMAT
{
  unsigned int SampleRate;
  char ChannelCount;
  char DecodeBufferSize;
};
#pragma pack(pop)

/* 6319 */
union $A2A60DCC2C958E872EECE00B123AF832
{
  XAUDIOXMAFORMAT Stream[6];
  unsigned int SampleRate;
};

/* 6320 */
struct XAUDIOSOURCEFORMAT
{
  char SampleType;
  __declspec(align(4)) $9D91AD7FD1BA7330B7FA3BAC24377F35 ___u1;
  __declspec(align(4)) $A2A60DCC2C958E872EECE00B123AF832 ___u2;
};

/* 6791 */
struct XaIwXmaDataInfo
{
  int totalMsec;
};

/* 6792 */
struct XaSeekTable
{
  int size;
  unsigned int *data;
};

/* 6793 */
struct XaSound
{
  XAUDIOPACKET_ALIGNED packet;
  XAUDIOSOURCEFORMAT format;
  XaIwXmaDataInfo xaIwXmaDataInfo;
  XaSeekTable seekTable;
};

/* 6334 */
#pragma pack(push, 4)
struct XAUDIOCHANNELMAPENTRY
{
  char InputChannel;
  char OutputChannel;
  float Volume;
};
#pragma pack(pop)

/* 775 */
enum DemoType
{
  DEMO_TYPE_NONE = 0x0,
  DEMO_TYPE_CLIENT = 0x1,
  DEMO_TYPE_SERVER = 0x2,
};

/* 776 */
enum CubemapShot
{
  CUBEMAPSHOT_NONE = 0x0,
  CUBEMAPSHOT_RIGHT = 0x1,
  CUBEMAPSHOT_LEFT = 0x2,
  CUBEMAPSHOT_BACK = 0x3,
  CUBEMAPSHOT_FRONT = 0x4,
  CUBEMAPSHOT_UP = 0x5,
  CUBEMAPSHOT_DOWN = 0x6,
  CUBEMAPSHOT_COUNT = 0x7,
};

/* 7118 */
struct $F6DFD6D87F75480A1EF1906639406DF5
{
  int time;
  int duration;
};

/* 7134 */
#pragma pack(push, 4)
struct visionSetVars_t
{
  _BOOL1 glowEnable;
  float glowBloomCutoff;
  float glowBloomDesaturation;
  float glowBloomIntensity0;
  float glowBloomIntensity1;
  float glowRadius0;
  float glowRadius1;
  float glowSkyBleedIntensity0;
  float glowSkyBleedIntensity1;
  _BOOL1 filmEnable;
  float filmBrightness;
  float filmContrast;
  float filmDesaturation;
  _BOOL1 filmInvert;
  float filmLightTint[3];
  float filmDarkTint[3];
};
#pragma pack(pop)

/* 779 */
enum visionSetLerpStyle_t
{
  VISIONSETLERP_UNDEFINED = 0x0,
  VISIONSETLERP_NONE = 0x1,
  VISIONSETLERP_TO_LINEAR = 0x2,
  VISIONSETLERP_TO_SMOOTH = 0x3,
  VISIONSETLERP_BACKFORTH_LINEAR = 0x4,
  VISIONSETLERP_BACKFORTH_SMOOTH = 0x5,
};

/* 7135 */
struct visionSetLerpData_t
{
  int timeStart;
  int timeDuration;
  visionSetLerpStyle_t style;
};

/* 7136 */
struct $BE9F66374A020A9809EEAF403416A176
{
  float aimSpreadScale;
};

/* 7137 */
struct hudElemSoundInfo_t
{
  int lastPlayedTime;
};

/* 7138 */
struct __declspec(align(8)) cg_s
{
  int clientNum;
  int localClientNum;
  DemoType demoType;
  CubemapShot cubemapShot;
  int cubemapSize;
  int renderScreen;
  int latestSnapshotNum;
  int latestSnapshotTime;
  snapshot_s *snap;
  snapshot_s *nextSnap;
  snapshot_s activeSnapshots[2];
  float frameInterpolation;
  int frametime;
  int time;
  int oldTime;
  int physicsTime;
  int mapRestart;
  int renderingThirdPerson;
  playerState_s predictedPlayerState;
  centity_s predictedPlayerEntity;
  playerEntity_t playerEntity;
  int predictedErrorTime;
  float predictedError[3];
  float landChange;
  int landTime;
  float heightToCeiling;
  refdef_s refdef;
  float refdefViewAngles[3];
  float lastVieworg[3];
  float swayViewAngles[3];
  float swayAngles[3];
  float swayOffset[3];
  int iEntityLastType[1024];
  XModel *pEntityLastXModel[1024];
  float zoomSensitivity;
  _BOOL1 isLoading;
  char objectiveText[1024];
  char scriptMainMenu[256];
  __declspec(align(4)) int scoresRequestTime;
  int numScores;
  int teamScores[4];
  int teamPings[4];
  int teamPlayers[4];
  score_t scores[24];
  int scoreLimit;
  int scoreFadeTime;
  int scoresTop;
  int scoresOffBottom;
  int scoresBottom;
  int selectedGamerIndex;
  int bannerLines[4];
  unsigned __int64 selectedGamerXuid;
  int drawHud;
  int crosshairClientNum;
  int crosshairClientLastTime;
  int crosshairClientStartTime;
  int identifyClientNum;
  int cursorHintIcon;
  int cursorHintTime;
  int cursorHintFade;
  int cursorHintString;
  int lastClipFlashTime;
  int lastHealthPulseTime;
  int lastHealthLerpDelay;
  int lastHealthClient;
  float lastHealth;
  float healthOverlayFromAlpha;
  float healthOverlayToAlpha;
  int healthOverlayPulseTime;
  int healthOverlayPulseDuration;
  int healthOverlayPulsePhase;
  _BOOL1 healthOverlayHurt;
  __declspec(align(4)) int healthOverlayLastHitTime;
  float healthOverlayOldHealth;
  int healthOverlayPulseIndex;
  int proneBlockedEndTime;
  int lastStance;
  int lastStanceChangeTime;
  int lastStanceFlashTime;
  int voiceTime;
  unsigned int weaponSelect;
  int weaponSelectTime;
  unsigned int weaponLatestPrimaryIdx;
  int prevViewmodelWeapon;
  int equippedOffHand;
  viewDamage_t viewDamage[8];
  int damageTime;
  float damageX;
  float damageY;
  float damageValue;
  float viewFade;
  int weapIdleTime;
  int nomarks;
  int v_dmg_time;
  float v_dmg_pitch;
  float v_dmg_roll;
  float fBobCycle;
  float xyspeed;
  float kickAVel[3];
  float kickAngles[3];
  float offsetAngles[3];
  float gunPitch;
  float gunYaw;
  float gunXOfs;
  float gunYOfs;
  float gunZOfs;
  float vGunOffset[3];
  float vGunSpeed[3];
  float viewModelAxis[4][3];
  float rumbleScale;
  float compassNorthYaw;
  float compassNorth[2];
  Material *compassMapMaterial;
  float compassMapUpperLeft[2];
  float compassMapWorldSize[2];
  int compassFadeTime;
  int healthFadeTime;
  int ammoFadeTime;
  int stanceFadeTime;
  int sprintFadeTime;
  int offhandFadeTime;
  int offhandFlashTime;
  shellshock_t shellshock;
  $F6DFD6D87F75480A1EF1906639406DF5 testShock;
  int holdBreathTime;
  int holdBreathInTime;
  int holdBreathDelay;
  float holdBreathFrac;
  float radarProgress;
  float selectedLocation[2];
  SprintState sprintStates;
  int adsViewErrorDone;
  int inKillCam;
  __declspec(align(8)) bgs_t bgs;
  cpose_t viewModelPose;
  visionSetVars_t visionSetPreLoaded[4];
  char visionSetPreLoadedName[4][64];
  visionSetVars_t visionSetFrom[2];
  visionSetVars_t visionSetTo[2];
  visionSetVars_t visionSetCurrent[2];
  visionSetLerpData_t visionSetLerpData[2];
  char visionNameNaked[64];
  char visionNameNight[64];
  int extraButtons;
  int lastActionSlotTime;
  _BOOL1 playerTeleported;
  __declspec(align(4)) int stepViewStart;
  float stepViewChange;
  $BE9F66374A020A9809EEAF403416A176 lastFrame;
  hudElemSoundInfo_t hudElemSound[32];
  int vehicleFrame;
};

/* 7140 */
struct cgs_t
{
  int viewX;
  int viewY;
  int viewWidth;
  int viewHeight;
  float viewAspect;
  int serverCommandSequence;
  int processedSnapshotNum;
  int localServer;
  char gametype[32];
  char szHostName[256];
  int maxclients;
  int privateClients;
  char mapname[64];
  int gameEndTime;
  int voteTime;
  int voteYes;
  int voteNo;
  char voteString[256];
  int redCrosshair;
  XModel *gameModels[512];
  FxEffectDef *fxs[100];
  FxEffectDef *smokeGrenadeFx;
  shellshock_parms_t holdBreathParams;
  char teamChatMsgs[8][271];
  int teamChatMsgTimes[8];
  int teamChatPos;
  int teamLastChatPos;
  float compassWidth;
  float compassHeight;
  float compassY;
  clientInfo_t corpseinfo[8];
};

/* 7142 */
#pragma pack(push, 4)
struct weaponInfo_s
{
  DObj_s *viewModelDObj;
  XModel *handModel;
  XModel *gogglesModel;
  XModel *rocketModel;
  XModel *knifeModel;
  char weapModelIdx;
  int partBits[4];
  int iPrevAnim;
  XAnimTree_s *tree;
  int registered;
  gitem_s *item;
  const char *translatedDisplayName;
  const char *translatedModename;
  const char *translatedAIOverlayDescription;
};
#pragma pack(pop)

/* 778 */
enum itemType_t
{
  IT_BAD = 0x0,
  IT_WEAPON = 0x1,
};

/* 7141 */
struct gitem_s
{
  itemType_t giType;
};

/* 7224 */
#pragma pack(push, 4)
struct entityShared_t
{
  char linked;
  char bmodel;
  char svFlags;
  int clientMask[2];
  char inuse;
  int broadcastTime;
  float mins[3];
  float maxs[3];
  int contents;
  float absmin[3];
  float absmax[3];
  float currentOrigin[3];
  float currentAngles[3];
  int ownerNum;
  int eventTime;
};
#pragma pack(pop)

/* 7227 */
#pragma pack(push, 4)
struct gentity_s
{
  entityState_s s;
  entityShared_t r;
  gclient_s *client;
  turretInfo_s *pTurretInfo;
  scr_vehicle_s *scr_vehicle;
  unsigned __int16 model;
  char physicsObject;
  char takedamage;
  char active;
  char nopickup;
  char handler;
  char team;
  unsigned __int16 classname;
  unsigned __int16 target;
  unsigned __int16 targetname;
  unsigned int attachIgnoreCollision;
  int spawnflags;
  int flags;
  int eventTime;
  int freeAfterEvent;
  int unlinkAfterEvent;
  int clipmask;
  int processedFrame;
  gentity_s *parent;
  int nextthink;
  int health;
  int maxHealth;
  int damage;
  int count;
  gentity_s *chain;
  char padding[60];
  tagInfo_s *tagInfo;
  gentity_s *tagChildren;
  unsigned __int16 attachModelNames[19];
  unsigned __int16 attachTagNames[19];
  int useCount;
  gentity_s *nextFree;
};
#pragma pack(pop)

/* 802 */
enum sessionState_t
{
  SESS_STATE_PLAYING = 0x0,
  SESS_STATE_DEAD = 0x1,
  SESS_STATE_SPECTATOR = 0x2,
  SESS_STATE_INTERMISSION = 0x3,
};

/* 801 */
enum clientConnected_t
{
  CON_DISCONNECTED = 0x0,
  CON_CONNECTING = 0x1,
  CON_CONNECTED = 0x2,
};

/* 6865 */
#pragma pack(push, 4)
struct usercmd_s
{
  int serverTime;
  int buttons;
  char weapon;
  char offHandIndex;
  int angles[3];
  char forwardmove;
  char rightmove;
  float meleeChargeYaw;
  char meleeChargeDist;
};
#pragma pack(pop)

/* 7225 */
struct playerTeamState_t
{
  int location;
};

/* 7226 */
#pragma pack(push, 4)
struct clientSession_t
{
  sessionState_t sessionState;
  int forceSpectatorClient;
  int status_icon;
  int archiveTime;
  int score;
  int deaths;
  int kills;
  int assists;
  unsigned __int16 scriptPersId;
  clientConnected_t connected;
  usercmd_s cmd;
  usercmd_s oldcmd;
  int localClient;
  int predictItemPickup;
  char newnetname[32];
  int maxHealth;
  int enterTime;
  playerTeamState_t teamState;
  int voteCount;
  int teamVoteCount;
  float moveSpeedScaleMultiplier;
  int viewmodelIndex;
  int noSpectate;
  int teamInfo;
  clientState_s cs;
  int psOffsetTime;
};
#pragma pack(pop)

/* 7228 */
#pragma pack(push, 2)
struct gclient_s
{
  playerState_s ps;
  clientSession_t sess;
  int spectatorClient;
  int noclip;
  int ufo;
  int bFrozen;
  int lastCmdTime;
  int buttons;
  int oldbuttons;
  int latched_buttons;
  int buttonsSinceLastFrame;
  float oldOrigin[3];
  float fGunPitch;
  float fGunYaw;
  int damage_blood;
  float damage_from[3];
  int damage_fromWorld;
  int accurateCount;
  int accuracy_shots;
  int accuracy_hits;
  int inactivityTime;
  int inactivityWarning;
  int lastVoiceTime;
  int switchTeamTime;
  float currentAimSpreadScale;
  gentity_s *persistantPowerup;
  int portalID;
  int dropWeaponTime;
  int sniperRifleFiredTime;
  float sniperRifleMuzzleYaw;
  int PCSpecialPickedUpCount;
  int useHoldEntity;
  int useHoldTime;
  int useButtonDone;
  int iLastCompassPlayerInfoEnt;
  int compassPingTime;
  int damageTime;
  float v_dmg_roll;
  float v_dmg_pitch;
  float swayViewAngles[3];
  float swayOffset[3];
  float swayAngles[3];
  float vLastMoveAng[3];
  float fLastIdleFactor;
  float vGunOffset[3];
  float vGunSpeed[3];
  int weapIdleTime;
  int lastServerTime;
  int lastSpawnTime;
  unsigned int lastWeapon;
  _BOOL1 previouslyFiring;
  _BOOL1 previouslyUsingNightVision;
  _BOOL1 previouslySprinting;
  int lastStand;
  int lastStandTime;
  unsigned int clanId;
};
#pragma pack(pop)

/* 7229 */
struct turretInfo_s
{
  int inuse;
  int flags;
  int fireTime;
  float arcmin[2];
  float arcmax[2];
  float dropPitch;
  int stance;
  int prevStance;
  int fireSndDelay;
  float userOrigin[3];
  float playerSpread;
  float pitchCap;
  int triggerDown;
  char fireSnd;
  char fireSndPlayer;
  char stopSnd;
  char stopSndPlayer;
};

/* 7230 */
#pragma pack(push, 4)
struct vehicle_node_t
{
  unsigned __int16 name;
  unsigned __int16 target;
  unsigned __int16 script_linkname;
  unsigned __int16 script_noteworthy;
  __int16 index;
  int rotated;
  float speed;
  float lookAhead;
  float origin[3];
  float dir[3];
  float angles[3];
  float length;
  __int16 nextIdx;
  __int16 prevIdx;
};
#pragma pack(pop)

/* 7231 */
struct vehicle_pathpos_t
{
  __int16 nodeIdx;
  __int16 endOfPath;
  float frac;
  float speed;
  float lookAhead;
  float slide;
  float origin[3];
  float angles[3];
  float lookPos[3];
  vehicle_node_t switchNode[2];
};

/* 7232 */
#pragma pack(push, 4)
struct vehicle_physic_t
{
  float origin[3];
  float prevOrigin[3];
  float angles[3];
  float prevAngles[3];
  float maxAngleVel[3];
  float yawAccel;
  float yawDecel;
  char inputAccelerationOLD;
  char inputTurning;
  float driverPedal;
  float driverSteer;
  int onGround;
  float colVelDelta[3];
  float mins[3];
  float maxs[3];
  float vel[3];
  float bodyVel[3];
  float rotVel[3];
  float accel[3];
  float maxPitchAngle;
  float maxRollAngle;
  float wheelZVel[4];
  float wheelZPos[4];
  int wheelSurfType[4];
  float worldTilt[3];
  float worldTiltVel[3];
};
#pragma pack(pop)

/* 956 */
enum VehicleMoveState
{
  VEH_MOVESTATE_STOP = 0x0,
  VEH_MOVESTATE_MOVE = 0x1,
  VEH_MOVESTATE_HOVER = 0x2,
};

/* 960 */
enum VehicleTurretState
{
  VEH_TURRET_STOPPED = 0x0,
  VEH_TURRET_STOPPING = 0x1,
  VEH_TURRET_MOVING = 0x2,
};

/* 7233 */
struct VehicleTurret
{
  int fireTime;
  int fireBarrel;
  float barrelOffset;
  int barrelBlocked;
  VehicleTurretState turretState;
};

/* 7234 */
struct VehicleJitter
{
  int jitterPeriodMin;
  int jitterPeriodMax;
  int jitterEndTime;
  float jitterOffsetRange[3];
  float jitterDeltaAccel[3];
  float jitterAccel[3];
  float jitterPos[3];
};

/* 7235 */
struct VehicleHover
{
  float hoverRadius;
  float hoverSpeed;
  float hoverAccel;
  float hoverGoalPos[3];
  int useHoverAccelForAngles;
};

/* 7236 */
struct VehicleRideSlot_t
{
  unsigned int tagName;
  int boneIdx;
  int entNum;
};

/* 7237 */
struct VehicleTags
{
  VehicleRideSlot_t riderSlots[3];
  int detach;
  int popout;
  int body;
  int turret;
  int turret_base;
  int barrel;
  int flash[5];
  int wheel[4];
};

/* 7238 */
#pragma pack(push, 4)
struct scr_vehicle_s
{
  vehicle_pathpos_t pathPos;
  vehicle_physic_t phys;
  int entNum;
  __int16 infoIdx;
  int flags;
  int team;
  VehicleMoveState moveState;
  __int16 waitNode;
  float waitSpeed;
  VehicleTurret turret;
  VehicleJitter jitter;
  VehicleHover hover;
  int drawOnCompass;
  unsigned __int16 lookAtText0;
  unsigned __int16 lookAtText1;
  int manualMode;
  float manualSpeed;
  float manualAccel;
  float manualDecel;
  float manualTime;
  float speed;
  float maxDragSpeed;
  float turningAbility;
  int hasTarget;
  int hasTargetYaw;
  int hasGoalYaw;
  int stopAtGoal;
  int stopping;
  int targetEnt;
  int lookAtEnt;
  float targetOrigin[3];
  float targetOffset[3];
  float targetYaw;
  float goalPosition[3];
  float goalYaw;
  float prevGoalYaw;
  float yawOverShoot;
  int yawSlowDown;
  float nearGoalNotifyDist;
  float joltDir[2];
  float joltTime;
  float joltWave;
  float joltSpeed;
  float joltDecel;
  int playEngineSound;
  int idleSndEnt;
  int engineSndEnt;
  float idleSndLerp;
  float engineSndLerp;
  VehicleTags boneIndex;
  int turretHitNum;
  float forcedMaterialSpeed;
};
#pragma pack(pop)

/* 7239 */
struct item_ent_t
{
  int ammoCount;
  int clipAmmoCount;
  int index;
};

/* 7240 */
#pragma pack(push, 4)
struct trigger_ent_t
{
  int threshold;
  int accumulate;
  int timestamp;
  int singleUserEntIndex;
  _BOOL1 requireLookAt;
};
#pragma pack(pop)

/* 7241 */
struct mover_ent_t
{
  float decelTime;
  float aDecelTime;
  float speed;
  float aSpeed;
  float midTime;
  float aMidTime;
  float pos1[3];
  float pos2[3];
  float pos3[3];
  float apos1[3];
  float apos2[3];
  float apos3[3];
};

/* 7242 */
struct corpse_ent_t
{
  int deathAnimStartTime;
};

/* 804 */
enum MissileStage
{
  MISSILESTAGE_SOFTLAUNCH = 0x0,
  MISSILESTAGE_ASCENT = 0x1,
  MISSILESTAGE_DESCENT = 0x2,
};

/* 805 */
enum MissileFlightMode
{
  MISSILEFLIGHTMODE_TOP = 0x0,
  MISSILEFLIGHTMODE_DIRECT = 0x1,
};

/* 7243 */
struct missile_ent_t
{
  float time;
  int timeOfBirth;
  float travelDist;
  float surfaceNormal[3];
  team_t team;
  float curvature[3];
  int targetEntNum;
  float targetOffset[3];
  MissileStage stage;
  MissileFlightMode flightMode;
};

/* 7245 */
union $73EC31463AB2E2014DA76FFB3C0281FF
{
  item_ent_t item[2];
  trigger_ent_t trigger;
  mover_ent_t mover;
  corpse_ent_t corpse;
  missile_ent_t missile;
};

/* 7244 */
#pragma pack(push, 4)
struct tagInfo_s
{
  gentity_s *parent;
  gentity_s *next;
  unsigned __int16 name;
  int index;
  float axis[4][3];
  float parentInvAxis[4][3];
};
#pragma pack(pop)

